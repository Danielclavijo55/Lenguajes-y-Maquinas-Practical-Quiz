/* Generated By:JavaCC: Do not edit this line. ParserProlog.java */
package uniandes.lym.parserJavaCC.parserProlog;


import java.util.*;

public class ParserProlog implements ParserPrologConstants {

  final public void hr() throws ParseException {
    functor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW:
      jj_consume_token(ARROW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Symbol:
        jj_consume_token(Symbol);
        break;
      case CALL:
        jj_consume_token(CALL);
        jj_consume_token(19);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATOM:
          functor();
          break;
        case VAR:
          jj_consume_token(VAR);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(20);
        break;
      case ATOM:
        functor();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          jj_consume_token(21);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
            jj_consume_token(VAR);
            break;
          case 24:
            list();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      case INT:
        jj_consume_token(INT);
        jj_consume_token(Symbol2);
        exp();
        break;
      case VAR:
        jj_consume_token(VAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Symbol2:
          jj_consume_token(Symbol2);
          exp();
          break;
        case 21:
          jj_consume_token(21);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
            jj_consume_token(VAR);
            break;
          case 24:
            list();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
        jj_consume_token(22);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Symbol:
          jj_consume_token(Symbol);
          break;
        case CALL:
          jj_consume_token(CALL);
          jj_consume_token(19);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATOM:
            functor();
            break;
          case VAR:
            jj_consume_token(VAR);
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(20);
          break;
        case ATOM:
          functor();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 21:
            jj_consume_token(21);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              jj_consume_token(VAR);
              break;
            case 24:
              list();
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          break;
        case INT:
          jj_consume_token(INT);
          jj_consume_token(Symbol2);
          exp();
          break;
        case VAR:
          jj_consume_token(VAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Symbol2:
            jj_consume_token(Symbol2);
            exp();
            break;
          case 21:
            jj_consume_token(21);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              jj_consume_token(VAR);
              break;
            case 24:
              list();
              break;
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(23);
  }

  final public void functor() throws ParseException {
    jj_consume_token(ATOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      arg();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_2;
        }
        jj_consume_token(22);
        arg();
      }
      jj_consume_token(20);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void arg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case ATOM:
      functor();
      break;
    case 24:
      list();
      break;
    case VAR:
      jj_consume_token(VAR);
      break;
    case QUOTED:
      jj_consume_token(QUOTED);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void list() throws ParseException {
    jj_consume_token(24);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED:
    case INT:
    case VAR:
    case ATOM:
    case 24:
      arg();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        jj_consume_token(22);
        arg();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        arg();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(26);
  }

  final public void exp() throws ParseException {
    term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
      case 28:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        term();
        break;
      case 28:
        jj_consume_token(28);
        term();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void term() throws ParseException {
    fact();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
      case 30:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        fact();
        break;
      case 30:
        jj_consume_token(30);
        fact();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void fact() throws ParseException {
// Parses  F -> B
//         F -> -F
//         B -> num
//         B -> '(' E ')'
//         B -> var
//   in EBNF:  F -> -F  |  (var |num |'(' E ')')
//   we don't remove right recursion


int  v,pos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      fact();
      break;
    case VAR:
      pos = variable();
      break;
    case INT:
      v = num();
      break;
    case 19:
      jj_consume_token(19);
      exp();
      jj_consume_token(20);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int num() throws ParseException, Error {
        int total=-9999;
        Token token;
    token = jj_consume_token(INT);
                try {
                        total = Integer.valueOf(token.image);
                }
                catch (NumberFormatException ee)
                {
                        {if (true) throw new Error("Number too large: "+token.image);}
                }
                {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public int variable() throws ParseException, Error {
        int pos,total=1;
        Token token;
    token = jj_consume_token(VAR);
  // returns an int corresponding to the variable's name  0 for $00, 1 for $01.... 17 for $17..
  //  upto  19 for $19. We only have 20 variables.

         pos = (token.image.charAt(1)-'0')*10 + (token.image.charAt(2)-'0');
         if (pos > 19){if (true) throw new Error("Variable does not exist:  "+ token.image);}
         {if (true) return pos;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserPrologTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60000,0x1020000,0x200000,0x1020000,0x200100,0x62880,0x400000,0x60000,0x1020000,0x200000,0x1020000,0x200100,0x62880,0x20,0x400000,0x80000,0x1062400,0x400000,0x2000000,0x1062400,0x18000000,0x18000000,0x60000000,0x60000000,0x100a2000,};
   }

  /** Constructor with InputStream. */
  public ParserProlog(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserProlog(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserPrologTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserProlog(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserPrologTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserProlog(ParserPrologTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserPrologTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
